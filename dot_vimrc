" Example Vim configuration.
" Copy or symlink to ~/.vimrc or ~/_vimrc.

set nocompatible                  " Must come first because it changes other options.
filetype off                      " Turn off file type detection.

" set rtp+=~/.vim/bundle/vundle
" call vundle#rc()

" Plugin 'gmarik/vundle'
"
" Plugin 'airblade/vim-rooter'
"
" Plugin 'godlygeek/tabular'
"
" Plugin 'groenewege/vim-less'
"
" Plugin 'kchmck/vim-coffee-script'
" Plugin 'slim-template/vim-slim.git'
"
" Plugin 'kien/ctrlp.vim'
" Plugin 'bling/vim-airline'
" Plugin 'edkolev/tmuxline.vim'
" Plugin 'edkolev/promptline.vim'
"
" Plugin 'vim-ruby/vim-ruby'
"
" Plugin 'tpope/vim-commentary'
" Plugin 'tpope/vim-endwise'
" Plugin 'tpope/vim-markdown'
" Plugin 'tpope/vim-ragtag'
" Plugin 'tpope/vim-rails'
" Plugin 'tpope/vim-surround'
" Plugin 'tpope/vim-unimpaired'
"
" Plugin 'mattn/webapi-vim'
" Plugin 'mattn/gist-vim'
"
" Plugin 'moll/vim-bbye'
"
" Plugin 'kylef/apiblueprint.vim'
"
" Plugin 'pangloss/vim-javascript'
" Plugin 'mxw/vim-jsx'
"
" Plugin 'keith/swift.vim'

let g:gist_clip_command = 'pbcopy'
let g:gist_post_private = 1
let g:gist_show_privates = 1
let g:gist_detect_filetype = 1


syntax enable                     " Turn on syntax highlighting.

filetype plugin indent on         " Turn file type detection back on once Vundle is set up.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set nowrap                        " Turn off line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp/     " Keep swap files in one location

" UNCOMMENT TO USE
set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = 'bubblegum'
let g:airline#extensions#tmuxline#enabled = 0

set shellcmdflag=-lc

set nospell
set autoread

set mouse=a
colorscheme vividchalk

hi SpellBad ctermbg=238

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

nnoremap <Leader>q :Bdelete<CR>
" Controversial...swap colon and semicolon for easier commands
"nnoremap ; :
"nnoremap : ;

"vnoremap ; :
"vnoremap : ;

" Automatic fold settings for specific files. Uncomment to use.
autocmd FileType ruby setlocal foldmethod=syntax foldlevel=20
autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

" Use older regex engine for ruby because its highlighting is super slow on
" the new one
autocmd FileType ruby setlocal re=1

" For the MakeGreen plugin and Ruby RSpec. Uncomment to use.
autocmd BufNewFile,BufRead *_spec.rb compiler rspec

" Strip trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Use relative line numbers in the current window when not in insert mode.
autocmd InsertEnter,WinLeave,FocusGained * :set norelativenumber
autocmd InsertLeave,WinEnter,FocusLost * :set relativenumber

au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.md setlocal spell
au BufRead,BufNewFile *.md setlocal textwidth=80

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" Run a given vim command on the results of fuzzy selecting from a given shell
" command. See usage below.
function! SelectaCommand(choice_command, selecta_args, vim_command)
  try
    silent let selection = system(a:choice_command . " | selecta " . a:selecta_args)
  catch /Vim:Interrupt/
    " Swallow the ^C so that the redraw below happens; otherwise there will be
    " leftovers from selecta on the screen
    redraw!
    return
  endtry
  redraw!
  exec a:vim_command . " " . selection
endfunction

" Find all files in all non-dot directories starting in the working directory.
" Fuzzy select one of those. Open the selected file with :e.
" nnoremap <C-p> :call SelectaCommand("find * -type f", "", ":e")<cr>
